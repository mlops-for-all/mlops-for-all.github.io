"use strict";(self.webpackChunkv_2=self.webpackChunkv_2||[]).push([[7628],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>f});var l=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);n&&(l=l.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,l)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,l,a=function(e,n){if(null==e)return{};var t,l,a={},o=Object.keys(e);for(l=0;l<o.length;l++)t=o[l],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(l=0;l<o.length;l++)t=o[l],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=l.createContext({}),m=function(e){var n=l.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},p=function(e){var n=m(e.components);return l.createElement(s.Provider,{value:n},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return l.createElement(l.Fragment,{},n)}},u=l.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=m(t),u=a,f=d["".concat(s,".").concat(u)]||d[u]||c[u]||o;return t?l.createElement(f,r(r({ref:n},p),{},{components:t})):l.createElement(f,r({ref:n},p))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,r=new Array(o);r[0]=u;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[d]="string"==typeof e?e:a,r[1]=i;for(var m=2;m<o;m++)r[m]=t[m];return l.createElement.apply(null,r)}return l.createElement.apply(null,t)}u.displayName="MDXCreateElement"},9525:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>m});var l=t(7462),a=(t(7294),t(3905));const o={title:"5. Model from MLflow",description:"",sidebar_position:5,contributors:["Jongseob Jeon"]},r=void 0,i={unversionedId:"api-deployment/seldon-mlflow",id:"version-1.0/api-deployment/seldon-mlflow",title:"5. Model from MLflow",description:"",source:"@site/i18n/en/docusaurus-plugin-content-docs/version-1.0/api-deployment/seldon-mlflow.md",sourceDirName:"api-deployment",slug:"/api-deployment/seldon-mlflow",permalink:"/en/docs/1.0/api-deployment/seldon-mlflow",draft:!1,editUrl:"https://github.com/mlops-for-all/mlops-for-all.github.io/tree/main/versioned_docs/version-1.0/api-deployment/seldon-mlflow.md",tags:[],version:"1.0",lastUpdatedBy:"Aiden-Jeon",lastUpdatedAt:1706783082,formattedLastUpdatedAt:"Feb 1, 2024",sidebarPosition:5,frontMatter:{title:"5. Model from MLflow",description:"",sidebar_position:5,contributors:["Jongseob Jeon"]},sidebar:"tutorialSidebar",previous:{title:"4. Seldon Fields",permalink:"/en/docs/1.0/api-deployment/seldon-fields"},next:{title:"6. Multi Models",permalink:"/en/docs/1.0/api-deployment/seldon-children"}},s={},m=[{value:"Model from MLflow",id:"model-from-mlflow",level:2},{value:"Secret",id:"secret",level:2},{value:"Seldon Core yaml",id:"seldon-core-yaml",level:2},{value:"args",id:"args",level:3},{value:"envFrom",id:"envfrom",level:3},{value:"API Creation",id:"api-creation",level:2}],p={toc:m},d="wrapper";function c(e){let{components:n,...o}=e;return(0,a.kt)(d,(0,l.Z)({},p,o,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"model-from-mlflow"},"Model from MLflow"),(0,a.kt)("p",null,"On this page, we will learn how to create an API using a model saved in the ",(0,a.kt)("a",{parentName:"p",href:"/en/docs/1.0/kubeflow/advanced-mlflow"},"MLflow Component"),"."),(0,a.kt)("h2",{id:"secret"},"Secret"),(0,a.kt)("p",null,"The initContainer needs credentials to access minio and download the model. The credentials for access to minio are as follows."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"apiVersion: v1\ntype: Opaque\nkind: Secret\nmetadata:\n  name: seldon-init-container-secret\n  namespace: kubeflow-user-example-com\ndata:\n  AWS_ACCESS_KEY_ID: bWluaW8K=\n  AWS_SECRET_ACCESS_KEY: bWluaW8xMjM=\n  AWS_ENDPOINT_URL: aHR0cDovL21pbmlvLm1ha2luYXJvY2tzLmFp\n  USE_SSL: ZmFsc2U=\n")),(0,a.kt)("p",null,"The input value for ",(0,a.kt)("inlineCode",{parentName:"p"},"AWS_ACCESS_KEY_ID")," is ",(0,a.kt)("inlineCode",{parentName:"p"},"minio"),". However, since the input value for the secret must be an encoded value, the value that is actually entered must be the value that comes out after performing the following. "),(0,a.kt)("p",null,"The values that need to be entered in data are as follows."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"AWS_ACCESS_KEY_ID: minio"),(0,a.kt)("li",{parentName:"ul"},"AWS_SECRET_ACCESS_KEY: minio123"),(0,a.kt)("li",{parentName:"ul"},"AWS_ENDPOINT_URL: ",(0,a.kt)("a",{parentName:"li",href:"http://minio-service.kubeflow.svc:9000"},"http://minio-service.kubeflow.svc:9000")),(0,a.kt)("li",{parentName:"ul"},"USE_SSL: false")),(0,a.kt)("p",null,"The encoding can be done using the following command."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"echo -n minio | base64\n")),(0,a.kt)("p",null,"Then the following values will be output."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"bWluaW8=\n")),(0,a.kt)("p",null,"If you do the encoding for the entire value, it will look like this:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"AWS_ACCESS_KEY_ID: minio="),(0,a.kt)("li",{parentName:"ul"},"AWS_SECRET_ACCESS_KEY: minio123="),(0,a.kt)("li",{parentName:"ul"},"AWS_ENDPOINT_URL: ",(0,a.kt)("a",{parentName:"li",href:"http://minio-service.kubeflow.svc:9000="},"http://minio-service.kubeflow.svc:9000=")),(0,a.kt)("li",{parentName:"ul"},"USE_SSL: false=")),(0,a.kt)("p",null,"You can generate a yaml file through the following command to create the secret."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"cat <<EOF > seldon-init-container-secret.yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: seldon-init-container-secret\n  namespace: kubeflow-user-example-com\ntype: Opaque\ndata:\n  AWS_ACCESS_KEY_ID: bWluaW8=\n  AWS_SECRET_ACCESS_KEY: bWluaW8xMjM=\n  AWS_ENDPOINT_URL: aHR0cDovL21pbmlvLXNlcnZpY2Uua3ViZWZsb3cuc3ZjOjkwMDA=\n  USE_SSL: ZmFsc2U=\nEOF\n")),(0,a.kt)("p",null,"Create the secret through the following command."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -f seldon-init-container-secret.yaml\n")),(0,a.kt)("p",null,"If performed normally, it will be output as follows."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"secret/seldon-init-container-secret created\n")),(0,a.kt)("h2",{id:"seldon-core-yaml"},"Seldon Core yaml"),(0,a.kt)("p",null,"Now let's write the yaml file to create Seldon Core."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'apiVersion: machinelearning.seldon.io/v1\nkind: SeldonDeployment\nmetadata:\n  name: seldon-example\n  namespace: kubeflow-user-example-com\nspec:\n  name: model\n  predictors:\n  - name: model\n\n    componentSpecs:\n    - spec:\n        volumes:\n        - name: model-provision-location\n          emptyDir: {}\n\n        initContainers:\n        - name: model-initializer\n          image: gcr.io/kfserving/storage-initializer:v0.4.0\n          args:\n            - "s3://mlflow/mlflow/artifacts/0/74ba8e33994144f599e50b3be176cdb0/artifacts/svc"\n            - "/mnt/models"\n          volumeMounts:\n          - mountPath: /mnt/models\n            name: model-provision-location\n          envFrom:\n          - secretRef:\n              name: seldon-init-container-secret\n\n        containers:\n        - name: model\n          image: ghcr.io/mlops-for-all/mlflowserver\n          volumeMounts:\n          - mountPath: /mnt/models\n            name: model-provision-location\n            readOnly: true\n          securityContext:\n            privileged: true\n            runAsUser: 0\n            runAsGroup: 0\n\n    graph:\n      name: model\n      type: MODEL\n      parameters:\n      - name: model_uri\n        type: STRING\n        value: "/mnt/models"\n      children: []\n')),(0,a.kt)("p",null,"There are two major changes compared to the previously created ",(0,a.kt)("a",{parentName:"p",href:"/en/docs/1.0/api-deployment/seldon-fields"},"Seldon Fields"),":"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"envFrom")," field is added to the initContainer."),(0,a.kt)("li",{parentName:"ol"},"The address in the args has been changed to ",(0,a.kt)("inlineCode",{parentName:"li"},"s3://mlflow/mlflow/artifacts/0/74ba8e33994144f599e50b3be176cdb0/artifacts/svc"),".")),(0,a.kt)("h3",{id:"args"},"args"),(0,a.kt)("p",null,"Previously, we mentioned that the first element of the args array is the path to the model we want to download. So, how can we determine the path of the model stored in MLflow?"),(0,a.kt)("p",null,"To find the path, go back to MLflow and click on the run, then click on the model, as shown below:"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"seldon-mlflow-0.png",src:t(9484).Z,width:"3466",height:"2274"})),(0,a.kt)("p",null,"You can use the path obtained from there."),(0,a.kt)("h3",{id:"envfrom"},"envFrom"),(0,a.kt)("p",null,"This process involves providing the environment variables required to access MinIO and download the model. We will use the ",(0,a.kt)("inlineCode",{parentName:"p"},"seldon-init-container-secret")," created earlier."),(0,a.kt)("h2",{id:"api-creation"},"API Creation"),(0,a.kt)("p",null,"First, let's generate the YAML file based on the specification defined above."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'apiVersion: machinelearning.seldon.io/v1\nkind: SeldonDeployment\nmetadata:\n  name: seldon-example\n  namespace: kubeflow-user-example-com\nspec:\n  name: model\n  predictors:\n  - name: model\n\n    componentSpecs:\n    - spec:\n        volumes:\n        - name: model-provision-location\n          emptyDir: {}\n\n        initContainers:\n        - name: model-initializer\n          image: gcr.io/kfserving/storage-initializer:v0.4.0\n          args:\n            - "s3://mlflow/mlflow/artifacts/0/74ba8e33994144f599e50b3be176cdb0/artifacts/svc"\n            - "/mnt/models"\n          volumeMounts:\n          - mountPath: /mnt/models\n            name: model-provision-location\n          envFrom:\n          - secretRef:\n              name: seldon-init-container-secret\n\n        containers:\n        - name: model\n          image: ghcr.io/mlops-for-all/mlflowserver\n          volumeMounts:\n          - mountPath: /mnt/models\n            name: model-provision-location\n            readOnly: true\n          securityContext:\n            privileged: true\n            runAsUser: 0\n            runAsGroup: 0\n\n    graph:\n      name: model\n      type: MODEL\n      parameters:\n      - name: model_uri\n        type: STRING\n        value: "/mnt/models"\n      - name: xtype\n        type: STRING\n        value: "dataframe"\n      children: []\nEOF\n')),(0,a.kt)("p",null,"Create a seldon pod."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -f seldon-mlflow.yaml\n\n")),(0,a.kt)("p",null,"If it is performed normally, it will be outputted as follows."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"seldondeployment.machinelearning.seldon.io/seldon-example created\n")),(0,a.kt)("p",null,"Now we wait until the pod is up and running properly."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get po -n kubeflow-user-example-com | grep seldon\n")),(0,a.kt)("p",null,"If it is outputted similarly to the following, the API has been created normally."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"seldon-example-model-0-model-5c949bd894-c5f28      3/3     Running     0          69s\n")),(0,a.kt)("p",null,"You can confirm the execution through the following request on the API created through the CLI."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST http://$NODE_IP:$NODE_PORT/seldon/seldon-deploy/sklearn/api/v1.0/predictions \\\n-H \'Content-Type: application/json\' \\\n-d \'{\n    "data": {\n        "ndarray": [\n            [\n                143.0,\n                0.0,\n                30.0,\n                30.0\n            ]\n        ],\n        "names": [\n            "sepal length (cm)",\n            "sepal width (cm)",\n            "petal length (cm)",\n            "petal width (cm)"\n        ]\n    }\n}\'\n')),(0,a.kt)("p",null,"If executed normally, you can get the following results."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'{"data":{"names":[],"ndarray":["Virginica"]},"meta":{"requestPath":{"model":"ghcr.io/mlops-for-all/mlflowserver:e141f57"}}}\n')))}c.isMDXComponent=!0},9484:(e,n,t)=>{t.d(n,{Z:()=>l});const l=t.p+"assets/images/seldon-mlflow-0-1d29992e36aa6ee88621e221794159d1.png"}}]);