"use strict";(self.webpackChunkv_2=self.webpackChunkv_2||[]).push([[4023],{3905:(n,e,t)=>{t.d(e,{Zo:()=>p,kt:()=>_});var a=t(7294);function l(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function r(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,a)}return t}function i(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?r(Object(t),!0).forEach((function(e){l(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function o(n,e){if(null==n)return{};var t,a,l=function(n,e){if(null==n)return{};var t,a,l={},r=Object.keys(n);for(a=0;a<r.length;a++)t=r[a],e.indexOf(t)>=0||(l[t]=n[t]);return l}(n,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);for(a=0;a<r.length;a++)t=r[a],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(l[t]=n[t])}return l}var s=a.createContext({}),m=function(n){var e=a.useContext(s),t=e;return n&&(t="function"==typeof n?n(e):i(i({},e),n)),t},p=function(n){var e=m(n.components);return a.createElement(s.Provider,{value:e},n.children)},d="mdxType",c={inlineCode:"code",wrapper:function(n){var e=n.children;return a.createElement(a.Fragment,{},e)}},u=a.forwardRef((function(n,e){var t=n.components,l=n.mdxType,r=n.originalType,s=n.parentName,p=o(n,["components","mdxType","originalType","parentName"]),d=m(t),u=l,_=d["".concat(s,".").concat(u)]||d[u]||c[u]||r;return t?a.createElement(_,i(i({ref:e},p),{},{components:t})):a.createElement(_,i({ref:e},p))}));function _(n,e){var t=arguments,l=e&&e.mdxType;if("string"==typeof n||l){var r=t.length,i=new Array(r);i[0]=u;var o={};for(var s in e)hasOwnProperty.call(e,s)&&(o[s]=e[s]);o.originalType=n,o[d]="string"==typeof n?n:l,i[1]=o;for(var m=2;m<r;m++)i[m]=t[m];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},8657:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>o,toc:()=>m});var a=t(7462),l=(t(7294),t(3905));const r={title:"6. Multi Models",description:"",sidebar_position:6,contributors:["Jongseob Jeon"]},i=void 0,o={unversionedId:"api-deployment/seldon-children",id:"api-deployment/seldon-children",title:"6. Multi Models",description:"",source:"@site/docs/api-deployment/seldon-children.md",sourceDirName:"api-deployment",slug:"/api-deployment/seldon-children",permalink:"/docs/api-deployment/seldon-children",draft:!1,editUrl:"https://github.com/mlops-for-all/mlops-for-all.github.io/tree/main/docs/api-deployment/seldon-children.md",tags:[],version:"current",lastUpdatedBy:"Dayoung Kang",lastUpdatedAt:1702862934,formattedLastUpdatedAt:"2023\ub144 12\uc6d4 18\uc77c",sidebarPosition:6,frontMatter:{title:"6. Multi Models",description:"",sidebar_position:6,contributors:["Jongseob Jeon"]},sidebar:"tutorialSidebar",previous:{title:"5. Model from MLflow",permalink:"/docs/api-deployment/seldon-mlflow"},next:{title:"1. Python \uac00\uc0c1\ud658\uacbd \uc124\uce58",permalink:"/docs/appendix/pyenv"}},s={},m=[{value:"Multi Models",id:"multi-models",level:2},{value:"Pipeline",id:"pipeline",level:2}],p={toc:m},d="wrapper";function c(n){let{components:e,...r}=n;return(0,l.kt)(d,(0,a.Z)({},p,r,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"multi-models"},"Multi Models"),(0,l.kt)("p",null,"\uc55e\uc11c \uc124\uba85\ud588\ub358 \ubc29\ubc95\ub4e4\uc740 \ubaa8\ub450 \ub2e8\uc77c \ubaa8\ub378\uc744 \ub300\uc0c1\uc73c\ub85c \ud588\uc2b5\ub2c8\ub2e4.",(0,l.kt)("br",{parentName:"p"}),"\n","\uc774\ubc88 \ud398\uc774\uc9c0\uc5d0\uc11c\ub294 \uc5ec\ub7ec \uac1c\uc758 \ubaa8\ub378\uc744 \uc5f0\uacb0\ud558\ub294 \ubc29\ubc95\uc5d0 \ub300\ud574\uc11c \uc54c\uc544\ubd05\ub2c8\ub2e4."),(0,l.kt)("h2",{id:"pipeline"},"Pipeline"),(0,l.kt)("p",null,"\uc6b0\uc120 \ubaa8\ub378\uc744 2\uac1c\ub97c \uc0dd\uc131\ud558\ub294 \ud30c\uc774\ud504\ub77c\uc778\uc744 \uc791\uc131\ud558\uaca0\uc2b5\ub2c8\ub2e4."),(0,l.kt)("p",null,"\ubaa8\ub378\uc740 \uc55e\uc11c \uc0ac\uc6a9\ud55c SVC \ubaa8\ub378\uc5d0 StandardScaler\ub97c \ucd94\uac00\ud558\uace0 \uc800\uc7a5\ud558\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'from functools import partial\n\nimport kfp\nfrom kfp.components import InputPath, OutputPath, create_component_from_func\n\n\n@partial(\n    create_component_from_func,\n    packages_to_install=["pandas", "scikit-learn"],\n)\ndef load_iris_data(\n    data_path: OutputPath("csv"),\n    target_path: OutputPath("csv"),\n):\n    import pandas as pd\n    from sklearn.datasets import load_iris\n\n    iris = load_iris()\n\n    data = pd.DataFrame(iris["data"], columns=iris["feature_names"])\n    target = pd.DataFrame(iris["target"], columns=["target"])\n\n    data.to_csv(data_path, index=False)\n    target.to_csv(target_path, index=False)\n\n@partial(\n    create_component_from_func,\n    packages_to_install=["dill", "pandas", "scikit-learn", "mlflow"],\n)\ndef train_scaler_from_csv(\n    data_path: InputPath("csv"),\n    scaled_data_path: OutputPath("csv"),\n    model_path: OutputPath("dill"),\n    input_example_path: OutputPath("dill"),\n    signature_path: OutputPath("dill"),\n    conda_env_path: OutputPath("dill"),\n):\n    import dill\n    import pandas as pd\n    from sklearn.preprocessing import StandardScaler\n\n    from mlflow.models.signature import infer_signature\n    from mlflow.utils.environment import _mlflow_conda_env\n\n    data = pd.read_csv(data_path)\n\n    scaler = StandardScaler()\n    scaled_data = scaler.fit_transform(data)\n    scaled_data = pd.DataFrame(scaled_data, columns=data.columns, index=data.index)\n\n    scaled_data.to_csv(scaled_data_path, index=False)\n\n    with open(model_path, mode="wb") as file_writer:\n        dill.dump(scaler, file_writer)\n\n    input_example = data.sample(1)\n    with open(input_example_path, "wb") as file_writer:\n        dill.dump(input_example, file_writer)\n\n    signature = infer_signature(data, scaler.transform(data))\n    with open(signature_path, "wb") as file_writer:\n        dill.dump(signature, file_writer)\n\n    conda_env = _mlflow_conda_env(\n        additional_pip_deps=["scikit-learn"],\n        install_mlflow=False\n    )\n    with open(conda_env_path, "wb") as file_writer:\n        dill.dump(conda_env, file_writer)\n\n\n@partial(\n    create_component_from_func,\n    packages_to_install=["dill", "pandas", "scikit-learn", "mlflow"],\n)\ndef train_svc_from_csv(\n    train_data_path: InputPath("csv"),\n    train_target_path: InputPath("csv"),\n    model_path: OutputPath("dill"),\n    input_example_path: OutputPath("dill"),\n    signature_path: OutputPath("dill"),\n    conda_env_path: OutputPath("dill"),\n    kernel: str,\n):\n    import dill\n    import pandas as pd\n    from sklearn.svm import SVC\n\n    from mlflow.models.signature import infer_signature\n    from mlflow.utils.environment import _mlflow_conda_env\n\n    train_data = pd.read_csv(train_data_path)\n    train_target = pd.read_csv(train_target_path)\n\n    clf = SVC(kernel=kernel)\n    clf.fit(train_data, train_target)\n\n    with open(model_path, mode="wb") as file_writer:\n        dill.dump(clf, file_writer)\n\n    input_example = train_data.sample(1)\n    with open(input_example_path, "wb") as file_writer:\n        dill.dump(input_example, file_writer)\n\n    signature = infer_signature(train_data, clf.predict(train_data))\n    with open(signature_path, "wb") as file_writer:\n        dill.dump(signature, file_writer)\n\n    conda_env = _mlflow_conda_env(\n        additional_pip_deps=["scikit-learn"],\n        install_mlflow=False\n    )\n    with open(conda_env_path, "wb") as file_writer:\n        dill.dump(conda_env, file_writer)\n\n\n@partial(\n    create_component_from_func,\n    packages_to_install=["dill", "pandas", "scikit-learn", "mlflow", "boto3"],\n)\ndef upload_sklearn_model_to_mlflow(\n    model_name: str,\n    model_path: InputPath("dill"),\n    input_example_path: InputPath("dill"),\n    signature_path: InputPath("dill"),\n    conda_env_path: InputPath("dill"),\n):\n    import os\n    import dill\n    from mlflow.sklearn import save_model\n    \n    from mlflow.tracking.client import MlflowClient\n\n    os.environ["MLFLOW_S3_ENDPOINT_URL"] = "http://minio-service.kubeflow.svc:9000"\n    os.environ["AWS_ACCESS_KEY_ID"] = "minio"\n    os.environ["AWS_SECRET_ACCESS_KEY"] = "minio123"\n\n    client = MlflowClient("http://mlflow-server-service.mlflow-system.svc:5000")\n\n    with open(model_path, mode="rb") as file_reader:\n        clf = dill.load(file_reader)\n\n    with open(input_example_path, "rb") as file_reader:\n        input_example = dill.load(file_reader)\n\n    with open(signature_path, "rb") as file_reader:\n        signature = dill.load(file_reader)\n\n    with open(conda_env_path, "rb") as file_reader:\n        conda_env = dill.load(file_reader)\n    save_model(\n        sk_model=clf,\n        path=model_name,\n        serialization_format="cloudpickle",\n        conda_env=conda_env,\n        signature=signature,\n        input_example=input_example,\n    )\n    run = client.create_run(experiment_id="0")\n    client.log_artifact(run.info.run_id, model_name)\n\n\nfrom kfp.dsl import pipeline\n\n\n@pipeline(name="multi_model_pipeline")\ndef multi_model_pipeline(kernel: str = "rbf"):\n    iris_data = load_iris_data()\n    scaled_data = train_scaler_from_csv(data=iris_data.outputs["data"])\n    _ = upload_sklearn_model_to_mlflow(\n        model_name="scaler",\n        model=scaled_data.outputs["model"],\n        input_example=scaled_data.outputs["input_example"],\n        signature=scaled_data.outputs["signature"],\n        conda_env=scaled_data.outputs["conda_env"],\n    )\n    model = train_svc_from_csv(\n        train_data=scaled_data.outputs["scaled_data"],\n        train_target=iris_data.outputs["target"],\n        kernel=kernel,\n    )\n    _ = upload_sklearn_model_to_mlflow(\n        model_name="svc",\n        model=model.outputs["model"],\n        input_example=model.outputs["input_example"],\n        signature=model.outputs["signature"],\n        conda_env=model.outputs["conda_env"],\n    )\n\n\nif __name__ == "__main__":\n    kfp.compiler.Compiler().compile(multi_model_pipeline, "multi_model_pipeline.yaml")\n\n')),(0,l.kt)("p",null,"\ud30c\uc774\ud504\ub77c\uc778\uc744 \uc5c5\ub85c\ub4dc\ud558\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 \ub098\uc635\ub2c8\ub2e4."),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"children-kubeflow.png",src:t(9023).Z,width:"2698",height:"1886"})),(0,l.kt)("p",null,"MLflow \ub300\uc2dc\ubcf4\ub4dc\ub97c \ud655\uc778\ud558\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 \ub450 \uac1c\uc758 \ubaa8\ub378\uc774 \uc0dd\uc131\ub429\ub2c8\ub2e4."),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"children-mlflow.png",src:t(4483).Z,width:"3006",height:"1744"})),(0,l.kt)("p",null,"\uac01\uac01\uc758 run_id\ub97c \ud655\uc778 \ud6c4 \ub2e4\uc74c\uacfc \uac19\uc774 SeldonDeployment \uc2a4\ud399\uc744 \uc815\uc758\ud569\ub2c8\ub2e4."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'apiVersion: machinelearning.seldon.io/v1\nkind: SeldonDeployment\nmetadata:\n  name: multi-model-example\n  namespace: kubeflow-user-example-com\nspec:\n  name: model\n  predictors:\n  - name: model\n\n    componentSpecs:\n    - spec:\n        volumes:\n        - name: model-provision-location\n          emptyDir: {}\n\n        initContainers:\n        - name: scaler-initializer\n          image: gcr.io/kfserving/storage-initializer:v0.4.0\n          args:\n            - "s3://mlflow/mlflow/artifacts/0/7f445015a0e94519b003d316478766ef/artifacts/scaler"\n            - "/mnt/models"\n          volumeMounts:\n          - mountPath: /mnt/models\n            name: model-provision-location\n          envFrom:\n          - secretRef:\n              name: seldon-init-container-secret\n        - name: svc-initializer\n          image: gcr.io/kfserving/storage-initializer:v0.4.0\n          args:\n            - "s3://mlflow/mlflow/artifacts/0/87eb168e76264b39a24b0e5ca0fe922b/artifacts/svc"\n            - "/mnt/models"\n          volumeMounts:\n          - mountPath: /mnt/models\n            name: model-provision-location\n          envFrom:\n          - secretRef:\n              name: seldon-init-container-secret\n\n        containers:\n        - name: scaler\n          image: seldonio/mlflowserver:1.8.0-dev\n          volumeMounts:\n          - mountPath: /mnt/models\n            name: model-provision-location\n            readOnly: true\n          securityContext:\n            privileged: true\n            runAsUser: 0\n            runAsGroup: 0\n        - name: svc\n          image: seldonio/mlflowserver:1.8.0-dev\n          volumeMounts:\n          - mountPath: /mnt/models\n            name: model-provision-location\n            readOnly: true\n          securityContext:\n            privileged: true\n            runAsUser: 0\n            runAsGroup: 0\n\n    graph:\n      name: scaler\n      type: MODEL\n      parameters:\n      - name: model_uri\n        type: STRING\n        value: "/mnt/models"\n      - name: predict_method\n        type: STRING\n        value: "transform"\n      children:\n      - name: svc\n        type: MODEL\n        parameters:\n        - name: model_uri\n          type: STRING\n          value: "/mnt/models"\n')),(0,l.kt)("p",null,"\ubaa8\ub378\uc774 \ub450 \uac1c\uac00 \ub418\uc5c8\uc73c\ubbc0\ub85c \uac01 \ubaa8\ub378\uc758 initContainer\uc640 container\ub97c \uc815\uc758\ud574\uc8fc\uc5b4\uc57c \ud569\ub2c8\ub2e4.\n\uc774 \ud544\ub4dc\ub294 \uc785\ub825\uac12\uc744 array\ub85c \ubc1b\uc73c\uba70 \uc21c\uc11c\ub294 \uad00\uacc4\uc5c6\uc2b5\ub2c8\ub2e4."),(0,l.kt)("p",null,"\ubaa8\ub378\uc774 \uc2e4\ud589\ud558\ub294 \uc21c\uc11c\ub294 graph\uc5d0\uc11c \uc815\uc758\ub429\ub2c8\ub2e4."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'graph:\n  name: scaler\n  type: MODEL\n  parameters:\n  - name: model_uri\n    type: STRING\n    value: "/mnt/models"\n  - name: predict_method\n    type: STRING\n    value: "transform"\n  children:\n  - name: svc\n    type: MODEL\n    parameters:\n    - name: model_uri\n      type: STRING\n      value: "/mnt/models"\n')),(0,l.kt)("p",null,"graph\uc758 \ub3d9\uc791 \ubc29\uc2dd\uc740 \ucc98\uc74c \ubc1b\uc740 \uac12\uc744 \uc815\ud574\uc9c4 predict_method\ub85c \ubcc0\ud658\ud55c \ub4a4 children\uc73c\ub85c \uc815\uc758\ub41c \ubaa8\ub378\uc5d0 \uc804\ub2ec\ud558\ub294 \ubc29\uc2dd\uc785\ub2c8\ub2e4.\n\uc774 \uacbd\uc6b0 scaler -> svc \ub85c \ub370\uc774\ud130\uac00 \uc804\ub2ec\ub429\ub2c8\ub2e4."),(0,l.kt)("p",null,"\uc774\uc81c \uc704\uc758 \uc2a4\ud399\uc744 yaml\ud30c\uc77c\ub85c \uc0dd\uc131\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'cat <<EOF > multi-model.yaml\napiVersion: machinelearning.seldon.io/v1\nkind: SeldonDeployment\nmetadata:\n  name: multi-model-example\n  namespace: kubeflow-user-example-com\nspec:\n  name: model\n  predictors:\n  - name: model\n\n    componentSpecs:\n    - spec:\n        volumes:\n        - name: model-provision-location\n          emptyDir: {}\n\n        initContainers:\n        - name: scaler-initializer\n          image: gcr.io/kfserving/storage-initializer:v0.4.0\n          args:\n            - "s3://mlflow/mlflow/artifacts/0/7f445015a0e94519b003d316478766ef/artifacts/scaler"\n            - "/mnt/models"\n          volumeMounts:\n          - mountPath: /mnt/models\n            name: model-provision-location\n          envFrom:\n          - secretRef:\n              name: seldon-init-container-secret\n        - name: svc-initializer\n          image: gcr.io/kfserving/storage-initializer:v0.4.0\n          args:\n            - "s3://mlflow/mlflow/artifacts/0/87eb168e76264b39a24b0e5ca0fe922b/artifacts/svc"\n            - "/mnt/models"\n          volumeMounts:\n          - mountPath: /mnt/models\n            name: model-provision-location\n          envFrom:\n          - secretRef:\n              name: seldon-init-container-secret\n\n        containers:\n        - name: scaler\n          image: ghcr.io/mlops-for-all/mlflowserver\n          volumeMounts:\n          - mountPath: /mnt/models\n            name: model-provision-location\n            readOnly: true\n          securityContext:\n            privileged: true\n            runAsUser: 0\n            runAsGroup: 0\n        - name: svc\n          image: ghcr.io/mlops-for-all/mlflowserver\n          volumeMounts:\n          - mountPath: /mnt/models\n            name: model-provision-location\n            readOnly: true\n          securityContext:\n            privileged: true\n            runAsUser: 0\n            runAsGroup: 0\n\n    graph:\n      name: scaler\n      type: MODEL\n      parameters:\n      - name: model_uri\n        type: STRING\n        value: "/mnt/models"\n      - name: predict_method\n        type: STRING\n        value: "transform"\n      children:\n      - name: svc\n        type: MODEL\n        parameters:\n        - name: model_uri\n          type: STRING\n          value: "/mnt/models"\nEOF\n')),(0,l.kt)("p",null,"\ub2e4\uc74c \uba85\ub839\uc5b4\ub97c \ud1b5\ud574 API\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -f multi-model.yaml\n")),(0,l.kt)("p",null,"\uc815\uc0c1\uc801\uc73c\ub85c \uc218\ud589\ub418\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 \ucd9c\ub825\ub429\ub2c8\ub2e4."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"seldondeployment.machinelearning.seldon.io/multi-model-example created\n")),(0,l.kt)("p",null,"\uc815\uc0c1\uc801\uc73c\ub85c \uc0dd\uc131\ub410\ub294\uc9c0 \ud655\uc778\ud569\ub2c8\ub2e4."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get po -n kubeflow-user-example-com | grep multi-model-example\n")),(0,l.kt)("p",null,"\uc815\uc0c1\uc801\uc73c\ub85c \uc0dd\uc131\ub418\uba74 \ub2e4\uc74c\uacfc \ube44\uc2b7\ud55c pod\uc774 \uc0dd\uc131\ub429\ub2c8\ub2e4."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"multi-model-example-model-0-scaler-svc-9955fb795-n9ffw   4/4     Running     0          2m30s\n")))}c.isMDXComponent=!0},9023:(n,e,t)=>{t.d(e,{Z:()=>a});const a=t.p+"assets/images/children-kubeflow-5100745b1be1aa100dd153b1785ad218.png"},4483:(n,e,t)=>{t.d(e,{Z:()=>a});const a=t.p+"assets/images/children-mlflow-5190d0e3f19a5772de21d1b08ece4822.png"}}]);